一、spring boot最核心的25个注解
  1.@SpringBootApplication
  用在 Spring Boot 主类上，标识这是一个 Spring Boot 应用，用来开启 Spring Boot 的各项能力。
  其实这个注解就是 @SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan 这三个注解的组合。
  2.@EnableAutoConfiguration
  允许 Spring Boot 自动配置注解，开启这个注解之后，Spring Boot 就能根据当前类路径下的包或者类来配置 Spring Bean。
  3.@Configuration
  这是 Spring 3.0 添加的一个注解，用来代替 applicationContext.xml 配置文件，所有这个配置文件里面能做到的事情都可以通过这个注解所在类来进行注册。
  4.@SpringBootConfiguration
  这个注解就是 @Configuration 注解的变体，只是用来修饰是 Spring Boot 配置而已，或者可利于 Spring Boot 后续的扩展。
  5.@ComponentScan
  这是 Spring 3.1 添加的一个注解，用来代替配置文件中的 component-scan 配置，开启组件扫描，即自动扫描包路径下的 @Component 注解进行注册 bean 实例到 context 中。
  
  Spring Boot 最核心的 3 个注解详解
  https://mp.weixin.qq.com/s/kNvy_0jb4oJtYdaxryq5xg
  
  6.@Conditional
  这是 Spring 4.0 添加的新注解，用来标识一个 Spring Bean 或者  Configuration 配置文件，当满足指定的条件才开启配置。
  7.@ConditionalOnBean
  组合 @Conditional 注解，当容器中有指定的 Bean 才开启配置。
  8.@ConditionalOnMissingBean
  组合 @Conditional 注解，和 @ConditionalOnBean 注解相反，当容器中没有指定的 Bean 才开启配置。
  9.@Import
  这是 Spring 3.0 添加的新注解，用来导入一个或者多个 @Configuration 注解修饰的类，这在 Spring Boot 里面应用很多。
  10.@ImportResource
  这是 Spring 3.0 添加的新注解，用来导入一个或者多个 Spring  配置文件，这对 Spring Boot 兼容老项目非常有用，因为有些配置无法通过 Java Config 的形式来配置就只能用这个注解来导入。
  https://mp.weixin.qq.com/s/lOA9djEptJyZ2sm93nxr-Q
  
二、Spring Boot 核心配置文件详解
    用过 Spring Boot 的都知道在 Spring Boot 中有以下两种配置文件
      bootstrap (.yml 或者 .properties)
      application (.yml 或者 .properties)
    Spring Cloud 构建于 Spring Boot 之上，在 Spring Boot 中有两种上下文，一种是 bootstrap, 另外一种是 application。
    bootstrap 是应用程序的父上下文，也就是说 bootstrap 加载优先于 applicaton。bootstrap 主要用于从额外的资源来加载配置信息，
    还可以在本地外部配置文件中解密属性。这两个上下文共用一个环境，它是任何Spring应用程序的外部属性的来源。
    bootstrap 里面的属性会优先加载，它们默认也不能被本地相同配置覆盖。
    
    因此，对比 application 配置文件，bootstrap 配置文件具有以下几个特性。
    boostrap 由父 ApplicationContext 加载，比 applicaton 优先加载。
    boostrap 里面的属性不能被覆盖。
    
    1.application 配置文件这个容易理解，主要用于 Spring Boot 项目的自动化配置。
    2.bootstrap 配置文件有以下几个应用场景：
    使用 Spring Cloud Config 配置中心时，这时需要在 bootstrap 配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；
    一些固定的不能被覆盖的属性；
    一些加密/解密的场景；
    
三、Spring Boot开启的2种方式
  Spring Boot开启的2种方式：
  1.继承spring-boot-starter-parent项目
  <parent>
    <groupId>org.springframework.boot</groupId> 
    <artifactId>spring-boot-starter-parent</artifactId>  
    <version>1.5.6.RELEASE</version>
  </parent>
  2.导入spring-boot-dependencies项目依赖
  <dependencyManagement>
    <dependencies>
      <dependency>     
        <groupId>org.springframework.boot</groupId>      
        <artifactId>spring-boot-dependencies</artifactId>    
        <version>1.5.6.RELEASE</version>   
        <type>pom</type>
        <scope>import</scope>
     </dependency>
  </dependencyManagement>
  
四、Spring Boot 参数校验
  1.引入spring-boot-starter-validation
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-validation</artifactId>
  </dependency>
  2.定义一个对象
  @Data
  public class LoginForm{
    @NotBlank(message="用户名不能为空")
    @Email
    private String username;
    
    @NotBlank(message="密码不能为空")
    @Length(min=6,message="密码长度至少6位"
    private String password;
  }
   3.适用@Valid校验，并将校验结果放到BindingResult对象中
   @Controller
   @RequestMapping("/login")
   public class LoginController {
   
    @PostMapping("/login.json")
    @ResponseBody
    public Result Login(@Valid LoginForm loginRequest,BindingResult bingingResult){
      if(bindingResult.hasErrors()){
        //......
      }
    }
   }

  4.单个参数校验
  @Controller
   @RequestMapping("/login")
   public class LoginController {
   
    @PostMapping("/login.json")
    @ResponseBody
    public Result Login(@NotNull(message="ID不能为空")Long id){
      if(bindingResult.hasErrors()){
        //......
      }
    }
   }
  
五、Spring Boot 返回 JSON 数据
  1.添加依赖：
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.0.4.RELEASE</version>
</parent>

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>

<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-core</artifactId>
    <version>2.9.0</version>
</dependency>

<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.9.0</version>
</dependency>
  2.对象转换成json
    User user = new User();
    user.serName("yqq");
    ObjectMapper objectMapper = new ObjectMapper();
    String userJsonStr = objectMapper.writeValueAsString(user);
    User jsonUser = objectMapper.readValue(userJsonStr, User.class);
    

